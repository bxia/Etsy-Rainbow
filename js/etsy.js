var _URL_ = "http://api.etsy.com/v2/public";
var _LISTING_ = "/listings/active.js";
var _KEY1_ = "&api_key=22u5zgz7eze80ymvmqshkdti";
var _KEY2_ = "&api_key=2ufyxjd5wccvgcm0yb61jp7b";
var _KEY3_ = "&api_key=hr7dbzisuo6y56soguanj071";
var _KEY4_ = "&api_key=tmo7w4tcorpv50ccnt2nj4n5";
var _KEY5_ = "&api_key=l7yd3rcwklc1g3gnl89z4qru";
var _KEY6_ = "&api_key=xt4c9qkyu9hmt139xrsqiyja";
var _KEY_ARRAY_ = [_KEY1_,_KEY2_,_KEY3_,_KEY4_,_KEY5_,_KEY6_];
var OK = 1;
var ERR = -1;
var INVALID_URL = "Invalid etsy url. Can't proceed to ajax request";
var SUCC_MSG = "Ajax request succeeded";
var FAIL_MSG = "Ajax request failed";
var color_accuracy = 20;
var searchLimit = 30;
var resultCache = new Object();
var storedImages = new Array();
var clicked= false;
//when_made
var vintages = [
    "1980s", "1970s", "1960s", "1950s", "1940s", "1930s", "1920s", "1910s", "1900s", "1800s", "1700s", "before_1700"
];

//who_made
var I_DID = "i_did";

/*
*  A class represents a filter in accordance to html form
   This will then be rendered and sent as a request to etsy.com to retrieve cooresponding products
*/
function Filter () {
    this.color = undefined;//hsv string,required
    
    //all options below are optional
    this.keyword = undefined;
    this.category = undefined;
    this.filterType = undefined;
    this.minPrice = undefined;
    this.maxPrice = undefined;
}

Filter.prototype.key = function() {
    return this.color+this.keyword+
            "min:"+ this.minPrice +
            "max:"+ this.maxPrice +
            "type:"+this.filterType +
            "category:"+this.category;
};


/*
    Send one ajax request to etsy.com with the given request parameter and callback function
    request should be of the following form
    request = {
        requestURL : ""  //typeof String, the url to send, generated by prepareURL()
        requestOBJ : obj //typeof Filter, the filter that holds the request specification
        requestGRID: obj //typeof Object, the grid that holds the grid that initiated the request

    }
*/
function sendRequest(request,callback) {
    if(request === undefined
        || request.requestURL===undefined
        || request.requestOBJ===undefined) 
        return;
    var etsyURL = request.requestURL;
    $.ajax({
        url: etsyURL,
        dataType: 'jsonp',
        success: function(data) {
            if (data.ok){
                callback(data,request);
            }
            else
                err(data);
        }
        
    });


}


/*
 * Takes in a filter object that specifies the details of the query, and convert it into a request url
    obj is required, typeof Filter
 */
function prepareURL (obj,grid,i) {
    //category and type are processed after the query,so they are not embedded in the request url
    //only color is required
    var key = _KEY_ARRAY_[i];
    var url = _URL_ + _LISTING_ + "?" + key;
    if(obj === undefined) return;
    if(obj.color === undefined) return; 
    if(obj.keyword !== undefined && obj.keyword.trim().length >0){
        url+= "&keyword="+obj.keyword.trim();
    }
    if(obj.minPrice !== undefined){
        var minPrice = obj.minPrice.trim();
        if(isNumber(minPrice)){
            minPrice = parseFloat(minPrice);
            if(minPrice>=0 && minPrice < Number.MAX_VALUE)
                url+= "&min_price="+minPrice;
        }
    }
    if(obj.maxPrice !== undefined){
        var maxPrice = obj.maxPrice.trim();
        if(isNumber(maxPrice)){
            maxPrice = parseFloat(maxPrice);
            if(maxPrice>=0 && maxPrice < Number.MAX_VALUE
                && (minPrice===undefined || minPrice <= maxPrice))
                url+= "&max_price="+maxPrice;
        }
    }
    url+= "&color="+obj.color.trim();
    url+="&color_accuracy=" + color_accuracy;
    url+="&limit=" + searchLimit;
    url+="&includes=Images:1,Shop";
    console.log(url);
    return {
        requestURL : url,
        requestOBJ : obj,
        requestGRID: grid
    };

}


/*
* Checked if this filter obj is cached
*/
function isCached (obj) {
    return obj!==undefined && resultCache[obj.key()]!==undefined;
}

/*
* Put the obj into the cache 
*/
function cache(obj,result){
    if(obj===undefined) return;
    resultCache[obj.key()] = result;
}

/*
* Read the result for the given filter from the cache
*/
function readFromCache (obj) {
    if(obj === undefined) return undefined;
    return resultCache[obj.key()];
}


/*
*   Takes in an object sent back from etsy.com with listings.
*   Return the most popular listings under the given filter, or undefined if no item found.
*/
function findMostPopular (data,filter) {
    if(data.count <= 0)
        return undefined;
    var l = data.results;
    var result = undefined; //the most popular listing to return for display.

    for(var i =0;i<l.length; i++){

        var o = l[i];
        
        var is_supply = o.is_supply;
        var when_made = o.when_made;
        var who_made = o.who_made;
        var num_favorers = o.num_favorers;
        var category = o.category_path[0].toLowerCase();
        var price = o.price;
        var type = filter.filterType;
        var cat  = filter.category;
        if(
            //image can't be duplicate
            storedImages.indexOf(o.Images[0].url_75x75) === -1
            &&
            //typeMatch
            (
                type==="all" || type === undefined ||
                (type !== undefined && type.indexOf("handmade")!== -1 && who_made===I_DID ) ||
                (type !== undefined && type.indexOf("vintage") !== -1 && vintages.indexOf(when_made) !== -1) ||
                (type !== undefined && type.indexOf("supplies")!== -1 && is_supply=== "true")
            )
            &&
            //categoryMatch
            (
                cat === "all" || cat === undefined || (cat != undefined && cat.indexOf(category)!== -1)
            )
            &&
            //price range match
            (
                (filter.minPrice===undefined && filter.maxPrice === undefined) ||
                (filter.minPrice !== undefined && isNumber(filter.minPrice) && parseFloat(price)>=parseFloat(filter.minPrice)
                    && filter.maxPrice !== undefined && isNumber(filter.maxPrice) && parseFloat(price) <= parseFloat(filter.maxPrice)) 

            )
            //num_favorer check
            &&
            (
                result === undefined || //currently no matching item yet
                result.num_favorers === undefined ||
                (num_favorers !== undefined && isNumber(num_favorers) &&
                    parseFloat(num_favorers) > parseFloat(result.num_favorers))
            )
            
        )
        {
            result = o;
        } 
    }
    storedImages.push(result.Images[0].url_75x75);
    return result;
}


/*
* Check if n is a number
*/
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}


/*
* Get the result(the hottest item) for display given the filter specification
*/
// function getAllListings(filter) {
//     if(filter === undefined) return undefined;

//     if(!isCached(filter))
//         sendRequest(prepareURL(filter), process);
//     return readFromCache(filter);   

// }


    // request = {
    //     requestURL : ""  //typeof String, the url to send, generated by prepareURL()
    //     requestOBJ : obj //typeof Filter, the filter that holds the request specification
    //     requestGRID: obj //typeof Object, the grid that holds the grid that initiated the request

    // }
function updateOneGrid(data,request){
    var grid = request.requestGRID;
    var filter = request.requestOBJ;
    var result = findMostPopular(data,filter);
    if(result === undefined){
        grid.el.html("<div class='image'></div>");
    }
    else{
        var style = "background-image:url('"+ result.Images[0].url_75x75+"');";
        var price = result.price;
        var description = result.description;
        var title = result.title;
        if(title.length >= 30)
            title = title.substring(0,27) + "...";
        var url = result.url;
        var shopURL = result.Shop.url;
        var shopName = result.Shop.shop_name;
        if(description.length >= 110)
            description = description.substring(0,110) + "...";

        console.log(result);

        var content = "<div class=pull-left><div class=shop>from <a href="+shopURL+" target=_blank>"+shopName+"</a></div><div class=description>"+description+"</div></div><div class=pull-right><div class=info><div class=price>$"+price+"</div><div class=link><a href="+url+" target=_blank><button class=btn>more</button></a></div></div></div>";
        grid.el.html("<div class='image popup-marker before' data-placement='bottom' data-content='"+content+"' data-original-title='"+title+"'style="+ style + " id='a"+ grid.id+ "'></div>");

        //$(grid.el).children()[0].addClass("after");
        console.log($(grid.el).children()[0].className = "image popup-marker before after");
        $(grid.el).addClass("gridAfter");
    $('#a'+grid.id).popover({
    html: true,
    trigger: 'manual'}).click(function(e) { 
        var l = ($('.popup-marker'));
        for(var i=0;i<l.length;i++){
            if( $(l[i])[0].id === 'a'+grid.id) continue;
            ($(l[i]).popover('hide'));  
        }
        $(this).popover('show');
        clicked=true;
        e.preventDefault();
    });
    }
}   

function run () {
    storedImages = new Array();
    var filter = new Filter();
    // filter.color = "0,100,60";
    filter.keyword = "book";
    // filter.minPrice = "15.00";
    // filter.maxPrice = "30.00";
    var result;
    //send one request and read the cache till the request in done
    // sendRequest(prepareURL(filter),process);
    // var id = setInterval(function () {
    //     if(readFromCache(filter) !== undefined){
    //         clearInterval(id);
    //         console.log("break");
    //         console.log(resultCache);
    //         console.log(readFromCache(filter)); 
    //         console.log(findMostPopular(readFromCache(filter),filter));
    //     }    
    // }, 500);
    var allGrids = new Array();

    $.each(grids, function(index, value) {
        // get hsl value of this grid
        var gridId = value.id;
        var hsl = getHsl(gridId, frame);
        var hslStr = Math.floor(hsl[0]) + "," + 
                     Math.floor(hsl[1]) + "," +
                     Math.floor(hsl[2]);


        var element = $(this);
//        element.html("<div class="image"></div>");

        // scale hsl, convert to hsv and scale back
        var hsv = hsl2hsv(hsl[0], hsl[1]/100, hsl[2]/100);
        hsv = [hsv[0], hsv[1]*100, hsv[2]*100];
        hsv[0] = Math.floor(hsv[0]);
        hsv[1] = Math.floor(hsv[1]);
        hsv[2] = Math.floor(hsv[2]);

        var rgb = hslToRgb(hsl[0]/360, hsl[1]/100, hsl[2]/100);
        var rgbStr = "rgb(" + 
                     Math.floor(rgb[0]) + ", " + 
                     Math.floor(rgb[1]) + ", " + 
                     Math.floor(rgb[2]) + ")";
        
        allGrids.push({
            id : gridId,
            color : hsv[0]+","+hsv[1]+","+hsv[2],
            el : element
        });
    });

    var i1=0, i2=8,i3 = 16,i4=24,i5=32,i6=40;    
    var loadId1 = setInterval(function() {
        if(i1>=8){
            clearInterval(loadId1);
        }
        else{
            var grid = allGrids[i1];
            var filter = new Filter();
            filter.color = grid.color;
            filter.keyword=  "book";
            sendRequest(prepareURL(filter,grid,0),updateOneGrid);
            
            i1++;
        }
    },205);

    var loadId2 = setInterval(function() {
        if(i2>=16){
            clearInterval(loadId2);
        }
        else{
            var grid = allGrids[i2];
            var filter = new Filter();
            filter.color = grid.color;
            filter.keyword=  "book";
            sendRequest(prepareURL(filter,grid,1),updateOneGrid);
            
            i2++;
        }
    },205);

    var loadId3 = setInterval(function() {
        if(i3>=24){
            clearInterval(loadId3);
        }
        else{
            var grid = allGrids[i3];
            var filter = new Filter();
            filter.color = grid.color;
            filter.keyword=  "book";
            sendRequest(prepareURL(filter,grid,2),updateOneGrid);
            
            i3++;
        }
    },205);

    var loadId4 = setInterval(function() {
        if(i4>=32){
            clearInterval(loadId4);
        }
        else{
            var grid = allGrids[i4];
            var filter = new Filter();
            filter.color = grid.color;
            filter.keyword=  "book";
            sendRequest(prepareURL(filter,grid,3),updateOneGrid);
            
            i4++;
        }
    },205);

    var loadId5 = setInterval(function() {
        if(i5>=40){
            clearInterval(loadId5);
        }
        else{
            var grid = allGrids[i5];
            var filter = new Filter();
            filter.color = grid.color;
            filter.keyword=  "book";
            sendRequest(prepareURL(filter,grid,4),updateOneGrid);
            
            i5++;
        }
    },205);

    var loadId6 = setInterval(function() {
        if(i6>=48){
            clearInterval(loadId6);
        }
        else{
            var grid = allGrids[i6];
            var filter = new Filter();
            filter.color = grid.color;
            filter.keyword=  "book";
            sendRequest(prepareURL(filter,grid,5),updateOneGrid);
            
            i6++;
        }
    },205);

    $(document).click(function(e) {
    if(clicked){ 
        clicked=false;
        return;
    }
    var l = ($('.popup-marker'));
    for(var i=0;i<l.length;i++){
       ($(l[i]).popover('hide'));  
    }
    clicked = false;

    });

    

}

function println (data) {
	console.log(data);
}

function err(data){
    console.log(FAIL_MSG);
    console.log(data);
    alert(FAIL_MSG);
}
